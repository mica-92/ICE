



    

    

    
    # Time to seconds - PM AM solved

    
    # Calculation of experiment Raw Stress and Strain 
    Lf = L0 - disp * vtoinch
    raw_stress = IL * vtoIL_fine * Lf / (sample_r**2 * math.pi * L0)
    raw_strain = np.log(L0 / Lf)
    raw_strain_norm = raw_strain * np.exp((- Q_DC / R) * ((T_norm ** -1)-(temp**-1)))
    
    
    def strain_rate_range(u,n=1):
        counter = 1
        u = str(f'{u:8f}')
        s = u.replace(".","") #in case the SR is given as a function 
        for ndx,i in enumerate(s):
            if i == "0":
                counter = 1
                continue
            if counter >= n:
                first_nonzero = int(s[ndx - n + 1: ndx + 1])
                if first_nonzero == 9:
                    h = str(first_nonzero + 1)
                    zero_count  =  ndx - 2
                    digits =  '0' * zero_count
                    max_range = float(str(f"0.{digits}{h}"))
                    
                    q = str(first_nonzero - 1)
                    min_range = float(u.replace(str(first_nonzero), q))
                    
                elif first_nonzero == 1:    
                    h = str(first_nonzero + 1)
                    max_range = float(u.replace(str(first_nonzero), h))
                    
                    q = 9
                    digits = '0' * ndx
                    min_range = float(str(f"0.{digits}{q}"))
                    
                else: #original argument
                    h = str(first_nonzero + 1)
                    max_range = float(u.replace(str(first_nonzero), h))
                    q = str(first_nonzero - 1)
                    min_range = float(u.replace(str(first_nonzero), q))    
                    
                    
            return min_range, max_range
            counter += 1
    SRR = strain_rate_range(SR_exp)

    
    # Cutting the data according to the slope
    def data_range(s):
        a = s
        values = []

        for w in range(0,(len(a)-1)):
            j = w+5
            if j <= (len(a)-1):
                slope, intercept, r_value, p_value, std_err = linregress (time_new[w:j],raw_strain_norm[w:j])
            else:
                j = (len(a)-1)
                slope, intercept, r_value, p_value, std_err = linregress (time_new[w:j],raw_strain_norm[w:j])
            values.append(slope)
        

        #First Cut
        condition = False
        h = 0
        while condition == False:
            if SRR[0] < values[h] < SRR[1]:
                condition = True
            else:
                h=h+1

        #Second Cut
        condition_2 = False
        q = h
        while condition_2 == False:
            if values[q] < SRR[0]:
                condition_2 = True
            else:
                q=q+1
        return h, q
    
    cut = data_range(time_new)
    print(cut)

    Lf_cut = L0 - (disp - disp[cut[0]]) * vtoinch
    stress = IL * vtoIL_fine * Lf_cut / (sample_r**2 * math.pi * L0)
    strain = np.log(L0 / Lf)
    strain_norm = strain * np.exp((- Q_DC / R) * ((T_norm ** -1)-(temp**-1)))

    sec_int = time_new[cut[0]:(cut[1])]
    sec_final = []
    for p in range(len(sec_int)):
        secii = sec_int[p] - sec_list[cut[0]]
        sec_final.append(secii)

    
    strain_final = strain_norm[cut[0]:cut[1]]
    stress_final = stress[cut[0]:cut[1]]



    plot_TS = plt.plot(sec_int, strain_final, color = 'darkblue')
    plt.title(f'{i}\nStrain- Time Plot')
    plt.xlabel('Time (seconds)')
    #plt.xticks(np.arange(min(sec_final),max(sec_final),500))
    plt.ylabel('Strain')
            
    plt.show()

    plot_TS = plt.plot(strain_final, stress_final, color = 'darkblue')
    plt.title(f'{i}\nStrain- Time Plot')
    plt.xlabel('Time (seconds)')
    #plt.xticks(np.arange(min(sec_final),max(sec_final),500))
    plt.ylabel('Strain')

    plt.show()

    #final_data[i] = {'Temperature':temp, 'Internal Load':IL, 'Displacement':disp, 'Seconds': sec_list, 'L0': L0, 'Strain Rate Exp': SR_exp, 'Grain Size': d, 'Stress': stress, 'Strain Norm': strain_norm} #Diccionario    


    


strain_norm_final = []
    for row in Lf_final:


#    print(len(stress))
    #print(strain_norm_final)
#    print(len(sec_list))

    #Calculation of the final cut according to strain rate
    #strain_loc = [n for n,i in enumerate(strain_norm) if i > 0.2][0]
    #print(strain_loc)
    #final_data[i] = {'Temperature':temp, 'Internal Load':IL, 'Displacement':disp, 'Seconds': sec_list, 'L0': L0, 'Strain Rate Exp': SR_exp, 'Grain Size': d, 'Stress': stress_raw, 'Strain Norm': strain_norm_raw} #Diccionario   


    print('THIS IS LF', final_data[20]['LF'][57:])
print('IL', final_data[20]['IL'][57:])
print('THIS IS STRESS', final_data[20]['Stress'])
print('THIS IS STRAIN', final_data[20]['Strain'])
print('THIS IS LOC', final_data[20]['DISLOC'])


    # Raw Data Plots
    fig, axs = plt.subplots(2)
    fig.suptitle(f'Raw Data Plots: PIL{i}')
    axs[0].plot(strain_norm_raw, stress_raw, color = 'darkblue')
    axs[0].set_title('Raw Stress- Strain')
    axs[1].plot(sec_list, strain_norm_raw, color = 'red')
    axs[1].set_title('Raw Strain- Time')
    #plt.show() 



    # Experiment Plots
    fig, axs = plt.subplots(2,2)
    fig.suptitle(f'PIL{i}')
    axs[0,1].plot(strain_norm_final, stress_final, color = 'darkblue')
    axs[0,1].set_title('Processed Stress- Strain')
    axs[1,1].plot(sec_list[:strain_loc], strain_norm_final, color = 'red')
    axs[1,1].set_title('Processed Strain- Time')
    axs[0,0].plot(strain_norm_raw, stress_raw, color = 'darkblue')
    axs[0,0].set_title('Raw Stress- Strain')
    axs[1,0].plot(sec_list, strain_norm_raw, color = 'red')
    axs[1,0].set_title('Raw Strain- Time')

    #plt.show()